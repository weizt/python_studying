class Person(object):
    # 类属性的创建，在类里，所有函数之外
    type = '人类'
    x = '这是一个类属性'

    def __init__(self, name, age):
        self.name = name
        self.age = age

'''
1.p1 和 p2 是通过Person类创建出来的实例对象
2.name 和 age 是对象属性，在__init__方法里，以参数的形式定义的
3.每一个实例对象都会单保存一份属性，并且共享类属性;
  如果实例对象和类对象都有相同的属性，实例对象的优先级更高
4.每一个实例对象之间的属性没有联系，互不影响
5.每一个实例对象都保存在不同的内存空间，各自有各自的内存id
6.类对象也有自己的内存空间，有自己的内存id
'''
p1 = Person('张三', 19)
p2 = Person('李四', 18)

# 类属性可以通过类对象和实例对象获取，是共享的属性，但是只存在于类对象的内存空间里
print(Person.type)  # 通过类对象获取
print(p1.x)  # 通过实例对象获取

# 类对象的属性只能通过类对象来修改，实例对象无权修改
p1.type = 'monkey'  # 这种方法是给实例对象创建了一个新的type属性，无法修改类属性
Person.type = 'human'  # 这是成功修改类属性

print(p2.type)  # p2由于没有type属性，所以会找类属性
print(p1.type)  # p1由于创建了一个新的type属性，所以实例对象的优先给最高
